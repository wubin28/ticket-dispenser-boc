{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"MockTurnNumberSequence.java:10: error: getNextTurnNumber() in MockTurnNumberSequence cannot override getNextTurnNumber() in TurnNumberSequence\n    public int getNextTurnNumber() {\n               ^\n  overridden method is static\nMockTurnNumberSequence.java:9: error: method does not override or implement a method from a supertype\n    @Override\n    ^\n2 errors\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","TicketDispenser.java":"public class TicketDispenser {\n\n    private TurnNumberSequence turnNumberSequence;\n\n    public TicketDispenser() {\n        this(new TurnNumberSequence());\n    }\n\n    public TicketDispenser(TurnNumberSequence turnNumberSequence) {\n        this.turnNumberSequence = turnNumberSequence;\n    }\n\n    public TurnTicket getTurnTicket()\n    {\n        int newTurnNumber = this.turnNumberSequence.getNextTurnNumber();\n        TurnTicket newTurnTicket = new TurnTicket(newTurnNumber);\n\n        return newTurnTicket;\n    }\n}\n","TicketDispenserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class TicketDispenserTest {\n    \n    @Test\n    public void the_turn_number_of_the_new_ticket_should_be_subsequent_to_the_previous_one() {\n        // Given\n        TicketDispenser dispenser = new TicketDispenser();\n\n        // When\n        TurnTicket previousTicket = dispenser.getTurnTicket();\n        TurnTicket newTicket = dispenser.getTurnTicket();\n\n        // Then\n        assertEquals(1, newTicket.getTurnNumber() - previousTicket.getTurnNumber());\n    }\n\n    @Test\n    public void the_turn_number_of_the_new_ticket_should_be_subsequent_to_the_previous_one_from_another_dispensor() {\n    \n        TicketDispenser anotherDispenser = new TicketDispenser();\n        TicketDispenser dispenser = new TicketDispenser();\n\n        int turnNumberOfPreviousTicketFromAnotherDispenser = \n                anotherDispenser.getTurnTicket().getTurnNumber();\n        int turnNumberOfNewTicket = \n                dispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1, \n            turnNumberOfNewTicket - \n                turnNumberOfPreviousTicketFromAnotherDispenser);\n    }\n\n    @Test @Ignore\n    public void the_dispenser_should_print_a_ticket_with_a_given_turn_number_using_mockito(){\n       \n        //Given\n        TurnNumberSequence sequence = mock(TurnNumberSequence.class);\n        when(TurnNumberSequence.getNextTurnNumber()).thenReturn(1);\n        //When\n        TicketDispenser dispenser = new TicketDispenser();\n        int ticketNumber = dispenser.getTurnTicket().getTurnNumber();\n        \n    }\n\n    @Test\n    public void the_dispenser_should_print_a_ticket_with_a_given_turn_number(){\n        // Given\n        MockTurnNumberSequence mockTurnNumberSequence = new MockTurnNumberSequence();\n        mockTurnNumberSequence.arrangeNextTurnNumber(11);\n        TicketDispenser dispenser = new TicketDispenser(mockTurnNumberSequence);\n\n        // When\n        TurnTicket ticket = dispenser.getTurnTicket();\n\n        // Then\n        assertEquals(11, ticket.getTurnNumber());\n    }\n}\n\n","TurnNumberSequence.java":"public class TurnNumberSequence {\n    private static int _turnNumber = 0;\n\n    public static int getNextTurnNumber()\n    {\n        return _turnNumber++;\n    }\n}\n","TurnTicket.java":"public class TurnTicket {\n    private final int turnNumber;\n\n    public TurnTicket(int turnNumber)\n    {\n        this.turnNumber = turnNumber;\n    }\n\n    public int getTurnNumber()\n    {\n        return turnNumber;\n    }\n}\n","MockTurnNumberSequence.java":"public class MockTurnNumberSequence extends TurnNumberSequence {\n\n    private int nextTurnNumber;\n\n    public void arrangeNextTurnNumber(int nextTurnNumber) {\n        this.nextTurnNumber = nextTurnNumber;\n    }\n\n    @Override\n    public int getNextTurnNumber() {\n        return this.nextTurnNumber;\n    }\n}"}