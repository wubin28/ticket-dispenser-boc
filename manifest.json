{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\nI..E.\nTime: 0.032\nThere was 1 failure:\n1) the_dispenser_should_print_a_ticket_with_a_given_turn_number(TicketDispenserTest)\njava.lang.IllegalStateException: the method MockTurnNumberSequence.getNextTurnNumber() should be called once.\n\tat MockTurnNumberSequence.verifyMethodGetNextTurnNumberCalled(MockTurnNumberSequence.java:22)\n\tat TicketDispenserTest.the_dispenser_should_print_a_ticket_with_a_given_turn_number(TicketDispenserTest.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 3,  Failures: 1\n\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","TicketDispenser.java":"public class TicketDispenser {\n\n    private TurnNumberSequence turnNumberSequence;\n\n    public TicketDispenser() {\n        this(new TurnNumberSequence());\n    }\n\n    public TicketDispenser(TurnNumberSequence turnNumberSequence) {\n        this.turnNumberSequence = turnNumberSequence;\n    }\n\n    public TurnTicket getTurnTicket()\n    {\n        int newTurnNumber = this.turnNumberSequence.getNextTurnNumber();\n        TurnTicket newTurnTicket = new TurnTicket(newTurnNumber);\n\n        return newTurnTicket;\n    }\n}\n","TicketDispenserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class TicketDispenserTest {\n    \n    @Test\n    public void the_turn_number_of_the_new_ticket_should_be_subsequent_to_the_previous_one() {\n        // Given\n        TicketDispenser dispenser = new TicketDispenser();\n\n        // When\n        TurnTicket previousTicket = dispenser.getTurnTicket();\n        TurnTicket newTicket = dispenser.getTurnTicket();\n\n        // Then\n        assertEquals(1, newTicket.getTurnNumber() - previousTicket.getTurnNumber());\n    }\n\n    @Test\n    public void the_turn_number_of_the_new_ticket_should_be_subsequent_to_the_previous_one_from_another_dispensor() {\n    \n        TicketDispenser anotherDispenser = new TicketDispenser();\n        TicketDispenser dispenser = new TicketDispenser();\n\n        int turnNumberOfPreviousTicketFromAnotherDispenser = \n                anotherDispenser.getTurnTicket().getTurnNumber();\n        int turnNumberOfNewTicket = \n                dispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1, \n            turnNumberOfNewTicket - \n                turnNumberOfPreviousTicketFromAnotherDispenser);\n    }\n\n    @Test @Ignore\n    public void the_dispenser_should_print_a_ticket_with_a_given_turn_number_using_mockito(){\n       \n        //Given\n        TurnNumberSequence sequence = mock(TurnNumberSequence.class);\n        when(sequence.getNextTurnNumber()).thenReturn(1);\n        //When\n        TicketDispenser dispenser = new TicketDispenser();\n        int ticketNumber = dispenser.getTurnTicket().getTurnNumber();\n        \n    }\n\n    @Test\n    public void the_dispenser_should_print_a_ticket_with_a_given_turn_number(){\n        // Given\n        MockTurnNumberSequence mockTurnNumberSequence = new MockTurnNumberSequence();\n        mockTurnNumberSequence.arrangeNextTurnNumber(11);\n        TicketDispenser dispenser = new TicketDispenser(mockTurnNumberSequence);\n\n        // When\n        TurnTicket ticket = dispenser.getTurnTicket();\n\n        // Then\n        assertEquals(11, ticket.getTurnNumber());\n        mockTurnNumberSequence.verifyMethodGetNextTurnNumberCalled();\n    }\n}\n\n","TurnNumberSequence.java":"public class TurnNumberSequence {\n    private static int _turnNumber = 0;\n\n    public int getNextTurnNumber()\n    {\n        return _turnNumber++;\n    }\n}\n","TurnTicket.java":"public class TurnTicket {\n    private final int turnNumber;\n\n    public TurnTicket(int turnNumber)\n    {\n        this.turnNumber = turnNumber;\n    }\n\n    public int getTurnNumber()\n    {\n        return turnNumber;\n    }\n}\n","MockTurnNumberSequence.java":"public class MockTurnNumberSequence extends TurnNumberSequence {\n\n    private int nextTurnNumber;\n    private int count;\n    \n    public MockTurnNumberSequence() {\n        count = 0;\n    }\n\n    public void arrangeNextTurnNumber(int nextTurnNumber) {\n        this.nextTurnNumber = nextTurnNumber;\n    }\n\n    @Override\n    public int getNextTurnNumber() {\n        //count++;\n        return this.nextTurnNumber;\n    }\n\n    public void verifyMethodGetNextTurnNumberCalled() {\n        if (count != 1) {\n            throw new IllegalStateException(\"the method MockTurnNumberSequence.getNextTurnNumber() should be called once.\");\n        }\n    }\n}"}