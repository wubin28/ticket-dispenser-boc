{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"TicketDispenserTest.java:10: error: constructor TurnTicket in class TurnTicket cannot be applied to given types;\n   TurnTicket  turnTicket1=new TurnTicket(); \n                           ^\n  required: int\n  found: no arguments\n  reason: actual and formal argument lists differ in length\nTicketDispenserTest.java:12: error: cannot find symbol\n   number1=turnTicket1.getTurnNumber();\n   ^\n  symbol:   variable number1\n  location: class TicketDispenserTest\nTicketDispenserTest.java:13: error: constructor TurnTicket in class TurnTicket cannot be applied to given types;\n   TurnTicket  turnTicket2=new TurnTicket(); \n                           ^\n  required: int\n  found: no arguments\n  reason: actual and formal argument lists differ in length\nTicketDispenserTest.java:14: error: cannot find symbol\n   number2=turnTicket1.getTurnNumber();\n   ^\n  symbol:   variable number2\n  location: class TicketDispenserTest\nTicketDispenserTest.java:17: error: cannot find symbol\n  assertEquals(number1, number2-1);\n               ^\n  symbol:   variable number1\n  location: class TicketDispenserTest\nTicketDispenserTest.java:17: error: cannot find symbol\n  assertEquals(number1, number2-1);\n                        ^\n  symbol:   variable number2\n  location: class TicketDispenserTest\n6 errors\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","TicketDispenser.java":"public class TicketDispenser {\n    public TurnTicket getTurnTicket()\n    {\n        int newTurnNumber = TurnNumberSequence.getNextTurnNumber();\n        TurnTicket newTurnTicket = new TurnTicket(newTurnNumber);\n\n        return newTurnTicket;\n    }\n}\n","TicketDispenserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class TicketDispenserTest {\n    \n    @Test\n    public void the_turn_number_of_the_new_ticket_should_be_subsequent_to_the_previous_one() {\n\n   TurnTicket  turnTicket1=new TurnTicket(); \n \n   number1=turnTicket1.getTurnNumber();\n   TurnTicket  turnTicket2=new TurnTicket(); \n   number2=turnTicket1.getTurnNumber();\n\n\n  assertEquals(number1, number2-1);\n    }\n\n\n\n    //todo the_turn_number_of_the_new_ticket_should_be_subsequent_to_the_previous_one_from_another_dispensor\n}\n","TurnNumberSequence.java":"public class TurnNumberSequence {\n    private static int _turnNumber = 0;\n\n    public static int getNextTurnNumber()\n    {\n        return _turnNumber++;\n    }\n}\n","TurnTicket.java":"public class TurnTicket {\n    private final int turnNumber;\n\n    public TurnTicket(int turnNumber)\n    {\n        this.turnNumber = turnNumber;\n    }\n\n    public int getTurnNumber()\n    {\n        return turnNumber;\n    }\n}\n"}